),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
),
# Data Table
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download Star Wars Data")
),
fluidPage(DT::dataTableOutput("table"))
)
)
# Define server logic
server <- function(input, output, session = session) {
# Filtered Starwars data
swInput <- reactive({
starwars <- starwars.load %>%
# Slider Filter
filter(birth_year >= input$GrantTypeSelect[1] & birth_year <= input$GrantTypeSelect[2])
# Homeworld Filter
if (length(input$StateSelect) > 0 ) {
starwars <- subset(starwars, homeworld %in% input$StateSelect)
}
return(starwars)
})
# Reactive melted data
mwInput <- reactive({
swInput() %>%
melt(id = "name")
})
# Point plot showing Mass, Height and Species
output$plot <- renderPlotly({
dat <- swInput()
ggplotly(
ggplot(data = dat, aes(x = mass, y = height, color = species, text = paste0("<b>", name, ":</b> ",
"<br>Homeworld: ", homeworld,
"<br>Mass: ", mass,
"<br>Height: ", height))) +
geom_point() +
guides(color = FALSE)
, tooltip = "text")
})
# Data Table
output$table <- DT::renderDataTable({
starwars <- swInput()
subset(starwars, select = c(name, height, mass, birth_year, homeworld, species, films))
})
# Updating the URL Bar
observe({
print(reactiveValuesToList(input))
session$doBookmark()
})
onBookmarked(function(url) {
updateQueryString(url)
})
# Download data in the datatable
output$downloadData <- downloadHandler(
filename = function() {
paste("star-wars-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(swInput(), file)
}
)
# Reset Filter Data
observeEvent(input$reset, {
updateSelectInput(session, "StateSelect", selected = c("Naboo", "Tatooine"))
updateSliderInput(session, "GrantTypeSelect", value = c(min(starwars.load$birth_year, na.rm = T), max(starwars.load$birth_year, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
# Run the application
shinyApp(ui = ui, server = server, enableBookmarking = "url")
newdata <- Investingapp[!is.na(Investingapp$) | !is.null(Investingapp$,]
# newdata <- transform(newdata,
#                           Award.Length = mapvalues(Award.Length, c(" ","3 years", "4 years","5 years"),
#                                                    c("3", "4", "5")))
#
# mutate(newdata, Project.Title = as.character(Project.Title),
#        Grant.Type = as.factor(Grant.Type),
#        State = as.factor(State),
#        Applicant = as.factor(Applicant))
# Define UI for application that draws a histogram
ui <- navbarPage("Investing in Innovation Appplication NavBar",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# State select
selectInput("StateSelect",
"State:",
choices = sort(unique(Investingapp$State)),
multiple = TRUE,
selectize = TRUE,
selected = c("MA", "VA")),
# Grant Type Selection
sliderInput("birthSelect",
"GrantType:",
min = min(starwars.load$birth_year, na.rm = T),
max = max(starwars.load$birth_year, na.rm = T),
value = c(min(starwars.load$birth_year, na.rm = T), max(starwars.load$birth_year, na.rm = T)),
step = 1),
actionButton("reset", "Reset Filters", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
),
# Data Table
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download Star Wars Data")
),
fluidPage(DT::dataTableOutput("table"))
)
)
# Define server logic
server <- function(input, output, session = session) {
# Filtered Starwars data
swInput <- reactive({
starwars <- starwars.load %>%
# Slider Filter
filter(birth_year >= input$GrantTypeSelect[1] & birth_year <= input$GrantTypeSelect[2])
# Homeworld Filter
if (length(input$StateSelect) > 0 ) {
starwars <- subset(starwars, homeworld %in% input$StateSelect)
}
return(starwars)
})
# Reactive melted data
mwInput <- reactive({
swInput() %>%
melt(id = "name")
})
# Point plot showing Mass, Height and Species
output$plot <- renderPlotly({
dat <- swInput()
ggplotly(
ggplot(data = dat, aes(x = mass, y = height, color = species, text = paste0("<b>", name, ":</b> ",
"<br>Homeworld: ", homeworld,
"<br>Mass: ", mass,
"<br>Height: ", height))) +
geom_point() +
guides(color = FALSE)
, tooltip = "text")
})
# Data Table
output$table <- DT::renderDataTable({
starwars <- swInput()
subset(starwars, select = c(name, height, mass, birth_year, homeworld, species, films))
})
# Updating the URL Bar
observe({
print(reactiveValuesToList(input))
session$doBookmark()
})
onBookmarked(function(url) {
updateQueryString(url)
})
# Download data in the datatable
output$downloadData <- downloadHandler(
filename = function() {
paste("star-wars-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(swInput(), file)
}
)
# Reset Filter Data
observeEvent(input$reset, {
updateSelectInput(session, "StateSelect", selected = c("Naboo", "Tatooine"))
updateSliderInput(session, "GrantTypeSelect", value = c(min(starwars.load$birth_year, na.rm = T), max(starwars.load$birth_year, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
# Run the application
shinyApp(ui = ui, server = server, enableBookmarking = "url")
Investingapp <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
is.null(Investingapp)
is.na(Investingapp)
is.null(Investingapp)
Investingapp <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
Investingapp%>%
filter(Project.Description != "NULL")
newdata <-  Investingapp%>%
filter(Project.Description != "NULL")
View(newdata)
Investingapp%>%filter(Project.Description != "NULL")
Investingapp <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
Investingapp%>%filter(Project.Description != "NULL")
Investingapp%>%filter(Project.Description != "NULL")
View(Investingapp)
Investingapp <- transform(Investingapp,
Award.Length = mapvalues(Award.Length, c(" ","3 years", "4 years","5 years"),
c("0","3", "4", "5")))
Investingapp <- transform(Investingapp,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c("0","3", "4", "5")))
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
Investingapp <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
Investingapp <- transform(Investingapp,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c("0","3", "4", "5")))
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
library(stringr)
library(ggplot2)
library(plyr)
library(ISLR)
library(MASS)
library(knitr)
Investingapp <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
Investingapp <- transform(Investingapp,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c("0","3", "4", "5")))
mutate(Investingapp, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant))
View(Investingapp)
Investingapp <- transform(Investingapp,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
Investingapp <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
Investingapp <- transform(Investingapp,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
View(Investingapp)
data <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
data <- transform(data,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
mutate(data, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant))
ui <- navbarPage("Investing in Innovation Appplication NavBar",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# State select
selectInput("StateSelect",
"State:",
choices = sort(unique(data$State)),
multiple = TRUE,
selectize = TRUE,
selected = c("MA", "VA")),
# checkbox Selection
checkboxInput("Private.Match.WaiverSelect", "Private.Match.Waiver:", value = TRUE),
# Award Requested Selection
sliderInput("AwardRequestedSelect",
"Award Requested:",
min = min(data$Award.Requested, na.rm = T),
max = max(data$Award.Requested, na.rm = T),
value = c(min(data$Award.Requested, na.rm = T), max(data$Award.Requested, na.rm = T)),
step = 1),
actionButton("reset", "Reset Filters", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
),
# Data Table
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download Investing in Innovative Applications Data")
),
fluidPage(DT::dataTableOutput("table"))
)
)
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
data <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
data <- transform(data,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
mutate(data, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant))
ui <- navbarPage("Investing in Innovation Appplication NavBar",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
# State select
selectInput("StateSelect",
"State:",
choices = sort(unique(data$State)),
multiple = TRUE,
selectize = TRUE,
selected = c("MA", "VA")),
# checkbox Selection
# checkboxInput("Private.Match.WaiverSelect", "Private.Match.Waiver:", value = TRUE),
# Award Requested Selection
sliderInput("AwardRequestedSelect",
"Award Requested:",
min = min(data$Award.Requested, na.rm = T),
max = max(data$Award.Requested, na.rm = T),
value = c(min(data$Award.Requested, na.rm = T), max(data$Award.Requested, na.rm = T)),
step = 1),
actionButton("reset", "Reset Filters", icon = icon("refresh"))
),
# Output plot
mainPanel(
plotlyOutput("plot")
)
)
),
# Data Table
tabPanel("Table",
inputPanel(
downloadButton("downloadData","Download Investing in Innovative Applications Data")
),
fluidPage(DT::dataTableOutput("table"))
)
)
server <- function(input, output, session = session) {
# Filtered investing data
swInput <- reactive({
data <- data %>%
# Slider Filter
filter(Award.Requested >= input$AwardRequestedSelect[1] & Award.Requested <= input$AwardRequestedSelect[2])
# State Filter
if (length(input$StateSelect) > 0 ) {
data <- subset(data, State %in% input$StateSelect)
}
return(data)
})
# Reactive melted data
mwInput <- reactive({
swInput() %>%
melt(id = "Applicant")
})
# Point plot showing Count, Award Length and Applicants
output$plot <- renderPlotly({
dat <- swInput()
ggplotly(
ggplot(data, aes(x = Award.Length , fill = Applicant)) +
geom_bar() +
ggtitle("Count by Award Length") +
xlab("Award Length") +
ylab("Count"),
tooltip = "text")
})
# ggplotly(
#   ggplot(data = newdata, aes(x = mass, y = height, color = species, text = paste0("<b>", name, ":</b> ",
#                                                                               "<br>Homeworld: ", homeworld,
#                                                                               "<br>Mass: ", mass,
#                                                                               "<br>Height: ", height))) +
#     geom_point() +
#     guides(color = FALSE)
#   , tooltip = "text")
# })
# Data Table
output$table <- DT::renderDataTable({
data <- swInput()
subset(data, select = c(Applicant, City, State, Project.Description, Grant.Type, Award.Requested, Location))
})
# Updating the URL Bar
observe({
print(reactiveValuesToList(input))
session$doBookmark()
})
onBookmarked(function(url) {
updateQueryString(url)
})
# Download data in the datatable
output$downloadData <- downloadHandler(
filename = function() {
paste("investing-in-innovative-applications", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(swInput(), file)
}
)
# Reset Filter Data
observeEvent(input$reset, {
updateSelectInput(session, "StateSelect", selected = c("MA", "VA"))
updateSliderInput(session, "GrantTypeSelect", value = c(min(data$Award.Requested, na.rm = T), max(data$Award.Requested, na.rm = T)))
showNotification("You have successfully reset the filters", type = "message")
})
}
shinyApp(ui = ui, server = server, enableBookmarking = "url")
runApp('C:/Users/sunas/Desktop/Courses/R shiny/Class_5-Updates/Navbar/app_final.R')
data <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Hw2-NaSu/hw2_NaSu/Investingininnovation2010.csv", header = TRUE)
data.load <- transform(data,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
runApp('hw2_NaSu/hw2_app_NaSu.R')
ggplot(data, aes(x = Award.Length , fill = Applicant)) +
geom_bar() +
ggtitle("Count by Award Length") +
xlab("Award Length") +
ylab("Count")
ggplotly(
ggplot(data, aes(x = Award.Length , fill = Applicant)) +
geom_bar() +
ggtitle("Count by Award Length") +
xlab("Award Length") +
ylab("Count"))
data <- transform(data,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
mutate(data, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant))]
data <- transform(data,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
mutate(data, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant))
ggplotly(
ggplot(data, aes(x = Award.Length , fill = Applicant)) +
geom_bar() +
ggtitle("Count by Award Length") +
xlab("Award Length") +
ylab("Count"))
data <- transform(data,
Award.Length = mapvalues(Award.Length, c("","3 years", "4 years","5 years"),
c(NA,"3", "4", "5")))
mutate(data, Project.Title = as.character(Project.Title),
Grant.Type = as.factor(Grant.Type),
State = as.factor(State),
Applicant = as.factor(Applicant))
ggplotly(
ggplot(data, aes(x = Award.Length)) +
geom_bar() +
ggtitle("Count by Award Length") +
xlab("Award Length") +
ylab("Count"))
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('C:/Users/sunas/Desktop/Courses/R shiny/Class_5-Updates/Navbar/app_final.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('C:/Users/sunas/Desktop/Courses/R shiny/hw1-NaSu/hw1-NaSu')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
class(data.load$State)
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
runApp('hw2_NaSu/hw2_app_NaSu.R')
